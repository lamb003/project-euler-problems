package problem_2

import (
	"fmt"
	"github.com/lamb003/project-euler-problems/utils"
)

/*

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
 */

func generateFibonacciNumbers(upperLimit int) []int {
	fiboSeries := make([]int, 0)
	fiboSeries = append(fiboSeries, 1)

	for i:=0; i < upperLimit; i++ {
		fiboNumber := fiboSeries[len(fiboSeries) -1 ] // get last number

		if len(fiboSeries) == 1 {
			fiboSeries = append(fiboSeries, 1)
		} else {
			fiboNumber2 := fiboSeries[len(fiboSeries) - 2 ]

			fiboNumber = fiboNumber + fiboNumber2
			if fiboNumber >= upperLimit {
				break
			}
			fiboSeries = append(fiboSeries, fiboNumber)
		}

	}
	return fiboSeries
}

func getEvenNumbers(data []int) []int {
	result := make([]int, 0)
	for _, i := range data {
		if i % 2 == 0 {
			result = append(result, i)
		}
	}
	return result
}

func solver(upperLimit int)  int{
	a, b :=  1, 1
	result := 0
	for b < upperLimit {
		if b % 2 == 0 {
			result = result + b
		}
		a, b =  b, a + b

	}
	return result
}


func Run()  {
	fiboNumbers := generateFibonacciNumbers(4000000)

	result := utils.SumSlice(getEvenNumbers(fiboNumbers))
	fmt.Println("Problem 2: ")
	fmt.Printf("Answer: %d \n", result)
	fmt.Printf("Answer: %d \n", solver(4000000))
}